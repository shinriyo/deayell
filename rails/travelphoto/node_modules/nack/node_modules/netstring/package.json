{
  "name": "netstring",
  "version": "0.3.0",
  "description": "A netstring implementation",
  "author": {
    "name": "Peter Griess",
    "email": "pg@std.in"
  },
  "engines": {
    "node": ">=0.6"
  },
  "repositories": [
    {
      "type": "git",
      "url": "http://github.com/josh/node-netstring"
    }
  ],
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/josh/node-netstring/blob/master/LICENSE"
    }
  ],
  "main": "./ns.js",
  "devDependencies": {
    "nodeunit": "0.7.4"
  },
  "scripts": {
    "test": "nodeunit ./test.js"
  },
  "readme": "A braindead module for reading and writing\n[netstrings](http://cr.yp.to/proto/netstrings.txt).\n\n## API\n    nsWriteLength(len)\n\nCompute the number of bytes to required serialize a netstring with the `len`\nbytes.\n\n    nsWrite(pay, payStart = 0, payEnd = pay.length, buf = undefined, bufOff = 0)\n\nWrite the payload `pay ` out in netstring format, returning a string. The\n`payStart` and `payEnd` parameters allow specifying a range for the payload\nand default to the entire object. Like `Buffer.slice()`, this `payStart` is\ninclusive and `payEnd` is exclusive. The `pay` parameter can be either a\nstring or a `Buffer` object.\n\nIf the `buf` parameter is specified, the netstring is written to this buffer\nrather than returned as a string. The `bufOff` parameter allows specifying\nthe offset into the buffer at which to begin writing. The length of the\nresulting netstring in bytes is returned.\n\n    nsPayload(buf, off = 0)\n\nGet the payload of the netstring pointed to by the given `buf` object at\noffset `off`. Despite its name, `buf`, can be either a string or a `Buffer`.\nThe returned value will be of the same type as the `buf` parameter or a\nnegative integer value in following the error taxonomy of\n`nsPayloadLength()`.\n\n    nsPayloadLength(buf, off = 0)\n\nGet the length of the payload pointed to by the given `buf` object at offset\n`off`. Despite its name, `buf`, can be either a string or a `Buffer`. The\nlength returned is only that of the payload; it does not include the header\nor footer. The returned value will be -1 if the buffer does not include\nenough data to make a complete length calculation.\n\n    nsLength(buf, off = 0)\n\nGet the length of the netstring pointed to by the given `buf` object at\noffset `off`. Despite its name, `buf`, can be either a string or a `Buffer`.\nThe length returned includes the length of the header and footer in addition\nto the payload. Negative values follow the taxonomy from `nsPayloadLength()`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "http://github.com/josh/node-netstring"
  },
  "bugs": {
    "url": "https://github.com/josh/node-netstring/issues"
  },
  "_id": "netstring@0.3.0",
  "dist": {
    "shasum": "868dc5b20c58d3f7305531d49368eaaabd19b712"
  },
  "_from": "netstring@~ 0.3",
  "_resolved": "https://registry.npmjs.org/netstring/-/netstring-0.3.0.tgz"
}
