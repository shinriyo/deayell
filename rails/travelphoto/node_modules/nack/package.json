{
  "name": "nack",
  "description": "Node powered Rack server",
  "version": "0.16.0",
  "author": {
    "name": "Joshua Peek"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/josh/nack/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/josh/nack.git"
  },
  "directories": {
    "man": "./man",
    "lib": "./lib"
  },
  "main": "./lib",
  "bin": {
    "nack": "./bin/nack"
  },
  "dependencies": {
    "async": "~ 0.1",
    "connect": "~ 2.7",
    "netstring": "~ 0.3"
  },
  "devDependencies": {
    "coffee-script": "1.6.2",
    "nodeunit": ">= 0.7.0"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "scripts": {
    "pretest": "cake pretest",
    "test": "cake test"
  },
  "man": [
    "/Users/sugita/.npm/nack/0.16.0/package/man/nack.1",
    "/Users/sugita/.npm/nack/0.16.0/package/man/protocol.7"
  ],
  "readme": "nack -- Node powered Rack server\n================================\n\n## DESCRIPTION\n\nnack is a [Rack](http://github.com/rack/rack) server built on top of the [Node.js](http://nodejs.org/) HTTP server. Node does all the hard work of accepting and parsing HTTP requests and nack simply passes it along to a Ruby worker process as a serialized object. You can read more about how the [IPC protocol][nack-protocol(7)] works. Besides running as a standalone Rack server, you can use the JS API to run multiple apps from the same Node process.\n\n## EXAMPLES\n\nSimple proxy\n\n    var http = require('http');\n    var nack = require('nack');\n\n    var app = nack.createProcess(\"/path/to/app/config.ru\");\n\n    http.createServer(function (req, res) {\n      app.proxy(req, res);\n    }).listen(8124, \"127.0.0.1\");\n\nYou can spawn up a pool of workers with:\n\n    var nack = require('nack');\n    nack.createPool(\"/path/to/app/config.ru\", { size: 3 });\n\nWorkers can idle out after a period of inactivity:\n\n    // Timeout after 15m\n    nack.createPool(\"/path/to/app/config.ru\", { idle: 15 * 60 * 1000 });\n\nTheres a more friendly server API that returns a [Connect](http://senchalabs.github.com/connect/) application.\n\n    var connect = require('connect');\n    var nack    = require('nack');\n\n    connect.createServer(\n      connect.logger(),\n      connect.vhost('foo.test',\n        nack.createServer(\"/u/apps/foo/config.ru\")\n      ),\n      connect.vhost('bar.test',\n        nack.createServer(\"/u/apps/bar/config.ru\")\n      )\n    ).listen(3000);\n\n## INSTALL\n\nYou can grab the package from npm.\n\n    npm install nack\n\n### DEPENDENCIES\n\n* node >= 0.6.x\n* node-netstring\n* rack\n* json\n\n## CAVEATS\n\nnack was design to be used as a local development proxy. You probably don't wanna try running a production app on it. I'm sure its slow too so don't send me any benchmarks.\n\n## LICENSE\n\nCopyright (c) 2010 Joshua Peek.\n\nReleased under the MIT license. See `LICENSE` for details.\n\n## SEE ALSO\n\nnack(1), nack-protocol(7), nack-server(3), nack-pool(3), nack-process(3)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/josh/nack/issues"
  },
  "_id": "nack@0.16.0",
  "dist": {
    "shasum": "673b0bc0a0a0b60908f0626adc4caca96199615f"
  },
  "_from": "nack@",
  "_resolved": "https://registry.npmjs.org/nack/-/nack-0.16.0.tgz"
}
